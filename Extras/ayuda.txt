1. https://github.com/nicknochnack/RealTimeObjectDetection.git 
    1.1. Esto me va dejar todo ordenado en carpetas. Ademas baja el script
    generate_tfrecord.py y un modelo preentrenado de Tensorflow.
2. Instalo Tensorflow en el entorno virtual (primero levanto y corro el 
entorno virtual):
    2.1. pip install tensorflow
3. Clono los modelos de Tensorflow: 
    3.1. git clone https://github.com/tensorflow/models
    3.2. Instalo la API de deteccion de objetos de Tensorflow:
        3.2.1.  cd models/research/
                protoc object_detection/protos/*.proto --python_out=.
                cp object_detection/packages/tf2/setup.py .
                python -m pip install .
4. Instalo labelImg:
    4.1. Clono su repositorio oficial: 
    git clone https://github.com/heartexlabs/labelImg.git
    4.2. pip install pyqt5==5.15.2 lxml
    4.3. Dentro de la carpeta clonada ingreso el comando: make qt5py3 
4. Colecto las imagenes.
5. Etiqueto las imagenes con labelImg:
    5.1. Corro labelImg: python labelImg.py
    5.2. Realizo los pasos descritos en doc-labelImg.txt
6. Muevo las imagenes y archivos .xml de cada gesto a la carpeta 
Tensorflow/workspace/images/train excepto 2 de cada uno, los cuales van a ir
a la carpeta Tensorflow/workspace/images/test
7. Creo el archivo label_map.pbtxt siguiendo los pasos descritos en 
doc-labelMap.txt
8. Genero los archivos .record utilizando el script de Tensorflow llamado
generate_tfrecord.py (Tensorflow/scripts/generate_tfrecord.py):
    8.1. Sigo los pasos descritos en usar_generate_tfrecord_script.txt para
    crear los archivos .record
9. Creo una carpeta dentro de Tensorflow/workspace/models/ llamada, por
ejemplo "my_ssd_model" y copio en ella la configuracion del modelo 
pre-entrenado descargado:
    9.1. cp Tensorflow/workspace/pre-trained-models/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/pipeline.config Tensorflow/workspace/models/my_ssd_model/
10. Actualizo la configuracion del modelo pre-entrenado para adaptarla a mi 
modelo personalizado:
    10.1. num_classes: <cantidad de gestos>
    10.2. batch_size: 4
    10.3. fine_tune_checkpoint: 'Tensorflow/workspace/pre-trained-models/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/checkpoint/ckpt-0'
    10.4. fine_tune_checkpoint_type: "detection"
    10.5. train_input_reader{ 
            label_map_path: 'Tensorflow/workspace/annotations/label_map.pbtxt'
            tf_record_input_reader{
                input_path: 'Tensorflow/workspace/annotations/train.record'
    10.6. eval_input_reader{
            label_map_path: 'Tensorflow/workspace/annotations/label_map.pbtxt'
            tf_record_input_reader{
                input_path: 'Tensoflow/workspace/annotations/test.record'
11. Luego de entrenado el modelo lo exporto para tener un saved_model:
    11.1. Defino variables de entorno:
            PIPELINE_CONFIG_PATH=path/to/pipeline.config
            MODEL_DIR=path/to/model
            CHECKPOINT_DIR=$MODEL_DIR/checkpoints
            OUTPUT_DIR=path/to/output
    11.2. Utilizo el script :
           python Tensorflow/models/research/object_detection/exporter_main_v2.py --input_type=image_tensor --pipeline_config_path=$PIPELINE_CONFIG_PATH --trained_checkpoint_dir=$CHECKPOINT_DIR --output_directory=$OUTPUT_DIR
    11.3. Esto me genera un carpeta saved_model en el directorio OUTPUT_DIR
12. Convierto a Tensorflow Lite:









